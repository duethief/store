/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'InSeok' at '13. 12. 19 �ㅽ썑 4:38' with Gradle 1.10
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at http://gradle.org/docs/1.10/userguide/tutorial_java_projects.html
 */

/*
// Apply the java plugin to add support for Java
apply plugin: 'java'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'maven central' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    mavenCentral()
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.5'

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile "junit:junit:4.11"
}
*/

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'groovy'

repositories {
    mavenCentral()
    maven {
        url "http://oss.sonatype.org/content/repositories/snapshots/"
    }
}

sourceCompatibility = 1.7
targetCompatibility = 1.7
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

eclipse{
    jdt{
        sourceCompatibility = 1.7
        targetCompatibility = 1.7
    }
}

dependencies {
    compile 'org.slf4j:slf4j-api:1.7.5'
    compile 'mysql:mysql-connector-java:5.1.27'
    compile 'org.springframework:spring-context:4.0.0.RELEASE'
    compile 'org.springframework:spring-jdbc:4.0.0.RELEASE'
    compile 'org.springframework:spring-orm:4.0.1.RELEASE'
    compile 'org.springframework:spring-tx:4.0.0.RELEASE'
    compile 'org.hibernate:hibernate-core:4.3.1.Final'
    compile 'org.hibernate:hibernate-entitymanager:4.3.1.Final'
    compile 'org.hibernate:hibernate-validator:5.0.3.Final'
    compile 'com.mysema.querydsl:querydsl-core:3.3.1'
    compile 'com.mysema.querydsl:querydsl-apt:3.3.1'
    compile 'com.mysema.querydsl:querydsl-jpa:3.3.1'
    compile 'com.mysema.querydsl:querydsl-sql:3.3.1'
    compile 'org.hibernate:hibernate-c3p0:4.3.4.Final'
    compile 'org.springframework.data:spring-data-jpa:1.5.0.RELEASE'
    compile 'c3p0:c3p0:0.9.1.2'
    compile 'com.jolbox:bonecp:0.8.0.RELEASE'
    testCompile 'org.springframework:spring-test:4.0.0.RELEASE'
    testCompile "junit:junit:4.11"
    groovy "org.codehaus.groovy:groovy-all:2.1.5"
    testCompile "org.spockframework:spock-core:1.0-groovy-2.0-SNAPSHOT"
    testCompile "org.spockframework:spock-spring:1.0-groovy-2.0-SNAPSHOT"
}

sourceSets {
    generated {
        java {
            srcDirs = ['src/main/generated']
        }
    }
}

task generateQueryDSL(type: JavaCompile, group: 'build', description: 'Generates the QueryDSL query types') {
    source = sourceSets.main.java
    classpath = configurations.compile
    options.compilerArgs = [
            "-proc:only",
            "-processor", "com.mysema.query.apt.jpa.JPAAnnotationProcessor"
    ]
    destinationDir = sourceSets.generated.java.srcDirs.iterator().next()
}

compileJava {
    dependsOn generateQueryDSL
    source generateQueryDSL.destinationDir
}

compileGeneratedJava {
    dependsOn generateQueryDSL
    options.warnings = false
    classpath += sourceSets.main.runtimeClasspath
}

clean {
    delete sourceSets.generated.java.srcDirs
}

idea {
    module {
        sourceDirs += file('src/main/generated')
    }
}